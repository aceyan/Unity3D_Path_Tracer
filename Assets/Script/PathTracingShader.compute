#pragma kernel CSMain
RWTexture2D<float4> Result;
float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;
//
Texture2D<float4> _SkyboxTexture;
SamplerState sampler_SkyboxTexture;
static const float PI = 3.14159265f;
float2 _PixelOffset;
float4 _DirectionalLight;

float2 _Pixel;
float _Seed;

float rand()
{
    float result = frac(sin(_Seed / 100.0f * dot(_Pixel, float2(12.9898f, 78.233f))) * 43758.5453f);
    _Seed += 1.0f;
    return result;
}


struct Sphere
{
    float3 position;
    float radius;
    float3 albedo;
    float3 specular;
    float3 refraction;
    float smoothness;
    float3 emission;
};
StructuredBuffer<Sphere> _Spheres;

struct Ray
{
    float3 origin;
    float3 direction;
    float3 energy;
};


Ray CreateRay(float3 origin, float3 direction)
{
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    ray.energy = float3(1.0f, 1.0f, 1.0f);
    return ray;
}

Ray CreateCameraRay(float2 uv)
{
    // Transform the camera origin to world space
    float3 origin = mul(_CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;
   //transform float4(uv, 0.0f, 1.0f) to camera space on near plane
    float3 direction = mul(_CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz; 
    direction = direction - float3(0, 0, 0);
    
    direction = mul(_CameraToWorld, float4(direction, 0.0f)).xyz;
    direction = normalize(direction);
    return CreateRay(origin, direction);
}

struct RayHit
{
    float3 position;
    float distance;
    float3 normal;
    float3 albedo;
    float3 specular;
    float3 refraction;
    float smoothness;
    float3 emission;
};

RayHit CreateRayHit()
{
    RayHit hit;
    hit.position = float3(0.0f, 0.0f, 0.0f);
    hit.distance = 1.#INF;
    hit.normal = float3(0.0f, 0.0f, 0.0f);
    hit.albedo = float3(0.0f, 0.0f, 0.0f);
    hit.specular = float3(0.0f, 0.0f, 0.0f);
    hit.refraction = float3(0.0f, 0.0f, 0.0f);
    hit.smoothness = 0;
    hit.emission = float3(0, 0, 0);
    return hit;
}

void IntersectGroundPlane(Ray ray, inout RayHit bestHit)
{
    // Calculate distance along the ray where the ground plane is intersected
    float t = -ray.origin.y / ray.direction.y;
    if (t > 0 && t < bestHit.distance)
    {
        bestHit.distance = t;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = float3(0.0f, 1.0f, 0.0f);
        bestHit.albedo = 0.5f;
        bestHit.specular = 0.03f;
        bestHit.refraction = 0.0f;
        bestHit.smoothness = 0.2f;
        bestHit.emission = float3(0, 0, 0);

    }
}


void IntersectSphere(Ray ray, inout RayHit bestHit, Sphere sphere)
{
    // Calculate distance along the ray where the sphere is intersected
    //https://en.wikipedia.org/wiki/Line%E2%80%93sphere_intersection
    float3 d = ray.origin - sphere.position;
    float p1 = -dot(ray.direction, d);
    float p2sqr = p1 * p1 - dot(d, d) + sphere.radius * sphere.radius;
    if (p2sqr < 0)
        return;
    float p2 = sqrt(p2sqr);
    float t = p1 - p2 > 0 ? p1 - p2 : p1 + p2;
    if (t > 0 && t < bestHit.distance)
    {
        bestHit.distance = t;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = normalize(bestHit.position - sphere.position);
        bestHit.albedo = sphere.albedo;
        bestHit.specular = sphere.specular;
        bestHit.refraction = sphere.refraction;
        bestHit.smoothness = sphere.smoothness;
        bestHit.emission = sphere.emission;
    }
}

float3x3 GetTangentSpace(float3 normal)
{
    // Choose a helper vector for the cross product
    float3 helper = float3(1, 0, 0);
    if (abs(normal.x) > 0.99f)
        helper = float3(0, 0, 1);

    // Generate vectors
    float3 tangent = normalize(cross(normal, helper));
    float3 binormal = normalize(cross(normal, tangent));
    return float3x3(tangent, binormal, normal);
}

float3 SampleHemisphere(float3 normal, float alpha)
{
    // Sample the hemisphere, where alpha determines the kind of the sampling
    float cosTheta = pow(rand(), 1.0f / (alpha + 1.0f));
    float sinTheta = sqrt(1.0f - cosTheta * cosTheta);
    float phi = 2 * PI * rand();
    float3 tangentSpaceDir = float3(cos(phi) * sinTheta, sin(phi) * sinTheta, cosTheta);

    // Transform direction to world space
    return mul(tangentSpaceDir, GetTangentSpace(normal));
}


RayHit Trace(Ray ray)
{
    RayHit bestHit = CreateRayHit();
    //IntersectGroundPlane(ray, bestHit);

 

    // Trace spheres
    uint numSpheres, stride;
    _Spheres.GetDimensions(numSpheres, stride);
    for (uint i = 0; i < numSpheres; i++)
        IntersectSphere(ray, bestHit, _Spheres[i]);
    
    return bestHit;
}

float sdot(float3 x, float3 y, float f = 1.0f)
{
    return saturate(dot(x, y) * f);
}

float energy(float3 color)
{
    return dot(color, 1.0f / 3.0f);
}

float SmoothnessToPhongAlpha(float s)
{
    return pow(1000.0f, s * s);
}

//calculate fresnel
void fresnel(const float3 I, const float3 N, const float3 ior, inout float kr)
{
    float cosi = clamp(-1, 1, dot(I, N));
    float etai = 1, etat = ior;
    if (cosi > 0)
    {
        //std::swap(etai, etat);
        float temp = etai;
        etai = etat;
        etat = temp;
    }
    // Compute sini using Snell's law
    float sint = etai / etat * sqrt(max(0.f, 1 - cosi * cosi));
    // Total internal reflection
    if (sint >= 1)
    {
        kr = 1;
    }
    else
    {
        float cost = sqrt(max(0.f, 1 - sint * sint));
        cosi = abs(cosi);
        float Rs = ((etat * cosi) - (etai * cost)) / ((etat * cosi) + (etai * cost));
        float Rp = ((etai * cosi) - (etat * cost)) / ((etai * cosi) + (etat * cost));
        kr = (Rs * Rs + Rp * Rp) / 2;
    }
    // As a consequence of the conservation of energy, transmittance is given by:
    // kt = 1 - kr;
}

float3 Shade(inout Ray ray, RayHit hit)
{
    if (hit.distance < 1.#INF)
    {

        
        if (any(hit.refraction))
        { //glassy objects   
            
           
            // Calculate chances of diffuse and specular reflection and refraction 
            hit.specular = max(1.0f - hit.albedo, hit.specular);
            float specAndRefractionChance = energy(hit.specular);
            float diffChance = energy(hit.albedo);
            // Roulette-select the ray's path
            float roulette = rand();
            if (roulette < diffChance)
            {
                            
                    // Diffuse reflection
                    ray.origin = hit.position + hit.normal * 0.001f;
                    //ray.direction = SampleHemisphere(hit.normal, 0.0f);
                    //ray.energy *= (1.0f / diffChance) * hit.albedo * sdot(hit.normal, ray.direction);
                    ray.direction = SampleHemisphere(hit.normal, 1.0f);
                    ray.energy *= (1.0f / diffChance) * hit.albedo;
                
            }
            else if (specAndRefractionChance > 0 && roulette < specAndRefractionChance + diffChance)
            {
                
                
                float kr;
                fresnel(ray.direction, hit.normal, 1.55, kr);
                bool fromOutside = dot(ray.direction, hit.normal) < 0;
                float3 bias = hit.normal * 0.001f;
            
            
                if (kr > 1)
                { //total internal reflection
               
                    ray.origin = hit.position + bias;
                    float alpha = SmoothnessToPhongAlpha(hit.smoothness);
                    ray.direction = SampleHemisphere(reflect(ray.direction, hit.normal), alpha);
                    //ray.direction = reflect(ray.direction, hit.normal);
                    float f = (alpha + 2) / (alpha + 1);
                    ray.energy *= (1.0f / specAndRefractionChance) * hit.specular * sdot(hit.normal, ray.direction, f);
                }
                else
                {
                    if (rand() < kr)
                    { //reflection
                        ray.origin = hit.position + bias;
                        float alpha = SmoothnessToPhongAlpha(hit.smoothness);
                        ray.direction = SampleHemisphere(reflect(ray.direction, hit.normal), alpha);
                        //ray.direction = reflect(ray.direction, hit.normal);
                        float f = (alpha + 2) / (alpha + 1);
                        ray.energy *= (1.0f / specAndRefractionChance) * hit.specular * sdot(hit.normal, ray.direction, f);
                    }
                    else
                    {
                      //refraction
                        float3 dir = fromOutside ? normalize(refract(ray.direction, hit.normal, 1 / 1.55)) : normalize(refract(ray.direction, -hit.normal, 1.55));
                        ray.origin = fromOutside ? hit.position - bias : hit.position + bias;
                        float alpha = SmoothnessToPhongAlpha(hit.smoothness);
                        ray.direction = SampleHemisphere(dir, alpha);
                        //ray.direction = dir;
                        //ray.energy *= (1.0f / specAndRefractionChance) * hit.refraction;
                        
                        float f = (alpha + 2) / (alpha + 1);
                        float refractionCoef = fromOutside ? sdot(-hit.normal, ray.direction, f) : sdot(hit.normal, ray.direction, f);
                        ray.energy *= (1.0f / specAndRefractionChance) * hit.refraction * refractionCoef;

                    }
           
                }
                
            }
            else
            {
            // Terminate ray
                ray.energy = 0.0f;
            }
        
        }
        else
        {

             // Calculate chances of diffuse and specular reflection
            hit.albedo = min(1.0f - hit.specular, hit.albedo);
            float specChance = energy(hit.specular);
            float diffChance = energy(hit.albedo);
        // Roulette-select the ray's path
            float roulette = rand();
            if (roulette < specChance)
            {
            // Specular reflection
                ray.origin = hit.position + hit.normal * 0.001f;
                float alpha = SmoothnessToPhongAlpha(hit.smoothness);
                ray.direction = SampleHemisphere(reflect(ray.direction, hit.normal), alpha);
                //ray.direction = reflect(ray.direction, hit.normal);
                
                float f = (alpha + 2) / (alpha + 1);
                ray.energy *= (1.0f / specChance) * hit.specular * sdot(hit.normal, ray.direction, f);
            }
            else if (diffChance > 0 && roulette < specChance + diffChance)
            {
            // Diffuse reflection
                ray.origin = hit.position + hit.normal * 0.001f;
            //ray.direction = SampleHemisphere(hit.normal, 0.0f);
            //ray.energy *= (1.0f / diffChance) * hit.albedo * sdot(hit.normal, ray.direction);
                ray.direction = SampleHemisphere(hit.normal, 1.0f);
                ray.energy *= (1.0f / diffChance) * hit.albedo;
            }
            else
            {
            // Terminate ray
                ray.energy = 0.0f;
            }
        
        }
         
        return hit.emission;
    }
    else
    {
        // Erase the ray's energy - the sky doesn't reflect anything
        ray.energy = 0.0f;

        // Sample the skybox and write it
        float theta = acos(ray.direction.y) / -PI;
        float phi = atan2(ray.direction.x, -ray.direction.z) / -PI * 0.5f;
        return _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0).xyz * 1.8f;
    }
}



[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    // Get the dimensions of the RenderTexture
    uint width, height;
    Result.GetDimensions(width, height);
    // Transform pixel to [-1,1] range
    float2 uv = float2((id.xy + _PixelOffset) / float2(width, height) * 2.0f - 1.0f);
    // Get a ray for the UVs
    Ray ray = CreateCameraRay(uv);
    
    _Pixel = id.xy;
    // Trace and shade
    float3 result = float3(0, 0, 0);
    for (int i = 0; i < 8; i++)
    {//tracing 8 bounces
        RayHit hit = Trace(ray);
        result += ray.energy * Shade(ray, hit);

        if (!any(ray.energy))
            break;
    }
    
    Result[id.xy] = float4(result , 1);

}